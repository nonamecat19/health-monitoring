import type { Middleware } from "swr";
declare type EventListener = (...args: any[]) => void;
export declare class EventEmitter {
    listeners: EventListener[];
    subscribe(fn: EventListener): () => void;
    emit(...args: any[]): void;
}
export declare type DevToolsMessage = {
    type: "updated_swr_cache";
    payload: {
        key: string;
        value: any;
    };
} | {
    type: "initialized";
} | {
    type: "request_start";
    payload: {
        key: string;
        id: number;
    };
} | {
    type: "request_success";
    payload: {
        key: string;
        id: number;
        data: any;
    };
} | {
    type: "request_error";
    payload: {
        key: string;
        id: number;
        error: any;
    };
} | {
    type: "request_discarded";
    payload: {
        key: string;
        id: number;
    };
};
export declare const createSWRDevtools: () => readonly [Middleware, EventEmitter];
export {};
